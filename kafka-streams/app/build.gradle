/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven"
    }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'
    
    implementation "org.apache.avro:avro:1.10.2"
    implementation 'org.apache.logging.log4j:log4j-api:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.17.2'

    implementation('org.apache.kafka:kafka-streams:2.8.0') {
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
    }
    implementation('org.apache.kafka:kafka-clients:2.8.0!!')
    implementation('io.confluent:kafka-streams-avro-serde:6.1.1') {
        exclude group: 'org.apache.kafka', module: 'kafka-clients'
        exclude group: 'org.apache.kafka', module: 'kafka-streams'
    }
}

application {
    // Define the main class for the application.
    mainClass = 'io.m03315.learning.kafka.BasicStreams'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


var basePackage = 'io.m03315.learning.kafka.'
def exerciseMap = [basic    : basePackage + 'BasicStreams',
                   ktable : basePackage + 'KTableExample']

task runStreams(type: Exec) {

    var streamsFullPath = ''

    if (project.hasProperty("args")) {
        var exercise = project.getProperty("args")
        streamsFullPath = exerciseMap[exercise]

        if (streamsFullPath == null) {
           throw new StopActionException("!!!!!! You entered '${exercise}' for an exercise to run, but that's not a valid entry.  The valid options are ${exerciseMap.keySet()}" )
        }
        dependsOn assemble
        group = "Execution"
        println "Using example ${streamsFullPath}"
        description = "Run a Kafka Streams exercise"
        commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(), streamsFullPath
    }
}
